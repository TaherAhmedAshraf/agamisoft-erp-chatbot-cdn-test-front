(function (windowdocument)"use strict"if (typeof io"undefined")console.error( "ChatWidgetSocket.IO library is required. Please include it before this script." )returnconst ChatWidgetconfigserverUrl"httpposition"bottom-right"theme"default"welcomeMessage"Hello! How can we help you today?"buttonText"Chat with us"companyName"Support"showMinimizeButtontrueautoOpenfalsedebugfalsecolorsprimary"#667eea"secondary"#764ba2"accent"#ff6b6b"success"#51cf66"warning"#ffd43b"error"#ff4444"background"#ffffff"surface"#f8f9fa"text"#333333"textSecondary"#666666"border"#e9ecef"shadow"rgba(0000.12)"buttonsize60shape"circle"icon"default"customIconnullbackgroundColornullhoverEffect"scale"showNotificationfalsenotificationColor"#ff4444"positioncorner"bottom-right"offsetx20y20zIndex9999dimensionswidth350height500minWidth300maxWidth500minHeight400maxHeight600typographyfontFamily'-apple-systemBlinkMacSystemFont"Segoe UI"Robotosans-serif'fontSize14headerFontSize16titleFontSize18buttonFontSize14lineHeight1.4textcompanyName"Support"welcomeMessage"Hello! How can we help you today?"buttonText"Chat with us"connectingText"Connecting to chat service..."startChatText"Please provide your details to start chatting"nameLabel"Name *"phoneLabel"Phone *"emailLabel"Email"startChatButton"Start Chat"minimizeButton"Minimize"closeButton"Close"sendButton"Send"typingText"Agent is typing..."placeholderText"Type your message..."noMessagesText"No messages yet. Start the conversation!"animationsentrance"slide-up"duration300easing"ease-out"hoverEffectstruetypingIndicatortruestylingborderRadius12borderWidth0borderColor"transparent"shadow"0 8px 40px rgba(0000.12)"shadowHover"0 12px 50px rgba(0000.15)"stateisInitializedfalseisConnectedfalseisChatStartedfalseisOpenfalseisTypingfalseagentTypingfalsemessages[]sessioncustomerIdnullchatSessionIdnullagentInfonullcustomerInfoname""phone""email""socketnullelementscontainernullwidgetnullbuttonnullheadernullmessagesnullinputnullformnullstartFormnulltypingTimeoutnullinitfunction (options)if (this.state.isInitialized)console.warn("ChatWidgetAlready initialized")returnthis.configObject.assign(this.configoptions ||)if (!this.config.serverUrl)console.error("ChatWidgetserverUrl is required")returnthis.log("Initializing ChatWidget...")this.createWidget()this.checkExistingSession()this.state.isInitializedtruethis.log("ChatWidget initialized successfully")createWidgetfunction ()this.elements.containerdocument.createElement("div")this.elements.container.className"chat-widget-container " + this.config.position.corner + " " + this.config.themethis.elements.container.innerHTMLthis.getWidgetHTML()document.body.appendChild(this.elements.container)this.elements.widgetthis.elements.container.querySelector(".chat-widget")this.elements.buttonthis.elements.container.querySelector( ".chat-toggle-button" )this.elements.headerthis.elements.container.querySelector(".chat-header")this.elements.messagesthis.elements.container.querySelector(".chat-messages")this.elements.inputthis.elements.container.querySelector(".chat-input")this.elements.formthis.elements.container.querySelector(".chat-input-form")this.elements.startFormthis.elements.container.querySelector(".chat-start-form")this.applyCustomStyling()this.bindEvents()if (this.config.autoOpen)this.openWidget()getWidgetHTMLfunction ()return ` <!-- Chat Toggle Button --> <button class"chat-toggle-button" title"$this.config.text.buttonText"> $this.getButtonIcon()<svg class"close-icon" viewBox"0 0 24 24" width"24" height"24" style"displaynone"> <path d"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/> </svg> </button> <!-- Chat Widget --> <div class"chat-widget" style"displaynone"> <!-- Header --> <div class"chat-header"> <div class"chat-header-info"> <h3 class"chat-title">$this.config.text.companyName</h3> <span class"chat-status">Connect to start chatting</span> </div> <div class"chat-header-actions"> $this.config.showMinimizeButton ? '<button class"chat-minimize-btn" title"' + this.config.text.minimizeButton + '">−</button>'""<button class"chat-close-btn" title"$this.config.text.closeButton">×</button> </div> </div> <!-- Chat Body - Restructured for fixed input --> <div class"chat-body"> <!-- Connection Status --> <div class"chat-connecting" style"displayblock"> <div class"connecting-spinner"></div> <p>$this.config.text.connectingText</p> </div> <!-- Start Chat Form --> <div class"chat-start" style"displaynone"> <div class"chat-welcome"> <p>$this.config.text.welcomeMessage</p> <p>$this.config.text.startChatText</p> </div> <form class"chat-start-form"> <div class"form-group"> <label for"customer-name">$this.config.text.nameLabel</label> <input type"text" id"customer-name" name"name" required> </div> <div class"form-group"> <label for"customer-phone">$this.config.text.phoneLabel</label> <input type"tel" id"customer-phone" name"phone" required> </div> <div class"form-group"> <label for"customer-email">$this.config.text.emailLabel</label> <input type"email" id"customer-email" name"email"> </div> <button type"submit" class"chat-start-btn">$this.config.text.startChatButton</button> </form> </div> <!-- Chat Messages Container --> <div class"chat-conversation" style"displaynoneoverflowscrollmax-height300px"> <div class"chat-messages-container"> <div class"chat-messages"></div> <div class"chat-typing-indicator" style"displaynone"> <div class"typing-dots"> <span></span> <span></span> <span></span> </div> <span class"typing-text">$this.config.text.typingText</span> </div> </div> </div> </div> <!-- Chat Input - Fixed to bottom --> <div class"chat-input-container" style"displaynone"> <form class"chat-input-form"> <input type"text" class"chat-input" placeholder"$this.config.text.placeholderText" maxlength"1000"> <button type"submit" class"chat-send-btn" disabled> <svg viewBox"0 0 24 24" width"20" height"20"> <path d"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/> </svg> </button> </form> <div class"chat-actions"> <button class"chat-end-btn">End Chat</button> </div> </div> </div> `getButtonIconfunction ()const iconTypethis.config.button.iconconst customIconthis.config.button.customIconif (customIcon)return customIconswitch (iconType)case "message"return `<svg class"chat-icon" viewBox"0 0 24 24" width"24" height"24"> <path d"M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4l4 4 4-4h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z"/> </svg>`case "chat"return `<svg class"chat-icon" viewBox"0 0 24 24" width"24" height"24"> <path d"M21 6h-2v9H6v2c0 .55.45 1 1 1h11l4 4V7c0-.55-.45-1-1-1zm-4 6V3c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v14l4-4h10c.55 0 1-.45 1-1z"/> </svg>`case "support"return `<svg class"chat-icon" viewBox"0 0 24 24" width"24" height"24"> <path d"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/> </svg>`case "help"return `<svg class"chat-icon" viewBox"0 0 24 24" width"24" height"24"> <path d"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z"/> </svg>`defaultreturn `<svg class"chat-icon" viewBox"0 0 24 24" width"24" height"24"> <path d"M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4l4 4 4-4h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z"/> </svg>`applyCustomStylingfunction ()const containerthis.elements.containerconst buttonthis.elements.buttonconst widgetthis.elements.widgetif (this.config.colors)const rootdocument.documentElementthis.log("Applying colors"this.config.colors)if (this.config.colors.primary)root.style.setProperty("--chat-primary"this.config.colors.primary)if (this.config.colors.secondary)root.style.setProperty("--chat-secondary"this.config.colors.secondary)if (this.config.colors.accent)root.style.setProperty("--chat-accent"this.config.colors.accent)if (this.config.colors.success)root.style.setProperty("--chat-success"this.config.colors.success)if (this.config.colors.warning)root.style.setProperty("--chat-warning"this.config.colors.warning)if (this.config.colors.error)root.style.setProperty("--chat-error"this.config.colors.error)if (this.config.colors.background)root.style.setProperty("--chat-background"this.config.colors.background)if (this.config.colors.surface)root.style.setProperty("--chat-surface"this.config.colors.surface)if (this.config.colors.text)root.style.setProperty("--chat-text"this.config.colors.text)if (this.config.colors.textSecondary)root.style.setProperty("--chat-text-secondary"this.config.colors.textSecondary)if (this.config.colors.border)root.style.setProperty("--chat-border"this.config.colors.border)if (this.config.colors.shadow)root.style.setProperty("--chat-shadow"this.config.colors.shadow)this.log("CSS Variables set"backgroundgetComputedStyle(root).getPropertyValue('--chat-background')primarygetComputedStyle(root).getPropertyValue('--chat-primary')textgetComputedStyle(root).getPropertyValue('--chat-text')surfacegetComputedStyle(root).getPropertyValue('--chat-surface'))if (this.config.button)const btnConfigthis.config.buttonif (btnConfig.size)button.style.widthbtnConfig.size + "px"button.style.heightbtnConfig.size + "px"button.classList.remove( "shape-circle""shape-rounded""shape-square" )if (btnConfig.shape"square")button.classList.add("shape-square")else if (btnConfig.shape"rounded")button.classList.add("shape-rounded")elsebutton.classList.add("shape-circle")if (btnConfig.backgroundColor)button.style.backgroundbtnConfig.backgroundColorelse if (this.config.colors.primary)button.style.background`linear-gradient(135deg$this.config.colors.primary0%$this.config.colors.secondary100%)`button.classList.remove("hover-scale""hover-glow""hover-bounce")if (btnConfig.hoverEffect && btnConfig.hoverEffect !"none")button.classList.add("hover-" + btnConfig.hoverEffect)if (btnConfig.showNotification)button.classList.add("has-notification")if (btnConfig.notificationColor)button.style.setProperty( "--notification-color"btnConfig.notificationColor )if (this.config.dimensions)if (this.config.dimensions.width)widget.style.widththis.config.dimensions.width + "px"if (this.config.dimensions.height)widget.style.heightthis.config.dimensions.height + "px"if (this.config.colors && this.config.colors.background)widget.style.backgroundColorthis.config.colors.backgroundthis.log( "Applied background color directly"this.config.colors.background )const chatBodycontainer.querySelector(".chat-body")if (chatBody && this.config.colors.surface)chatBody.style.backgroundColorthis.config.colors.surfaceconst chatStartcontainer.querySelector(".chat-start")if (chatStart && this.config.colors.background)chatStart.style.backgroundColorthis.config.colors.backgroundconst inputContainercontainer.querySelector(".chat-input-container")if (inputContainer && this.config.colors.background)inputContainer.style.backgroundColorthis.config.colors.backgroundconst chatHeadercontainer.querySelector(".chat-header")if ( chatHeader && this.config.colors.primary && this.config.colors.secondary )chatHeader.style.background`linear-gradient(135deg$this.config.colors.primary0%$this.config.colors.secondary100%)`if ( button && this.config.colors.primary && this.config.colors.secondary )button.style.background`linear-gradient(135deg$this.config.colors.primary0%$this.config.colors.secondary100%)`const formInputscontainer.querySelectorAll( ".form-group input.chat-input" )formInputs.forEach((input)>if (this.config.colors.text)input.style.colorthis.config.colors.textif (this.config.colors.surface)input.style.backgroundColorthis.config.colors.surface)const labelscontainer.querySelectorAll( ".form-group label.chat-welcome p" )labels.forEach((label)>if (this.config.colors.textSecondary)label.style.colorthis.config.colors.textSecondary)const mainWelcomeTextcontainer.querySelector( ".chat-welcome pfirst-child" )if (mainWelcomeText && this.config.colors.text)mainWelcomeText.style.colorthis.config.colors.textif (this.config.typography)container.style.fontFamilythis.config.typography.fontFamilycontainer.style.fontSizethis.config.typography.fontSize + "px"container.style.lineHeightthis.config.typography.lineHeightif (this.config.styling)if (this.config.styling.borderRadius)widget.style.borderRadiusthis.config.styling.borderRadius + "px"if (this.config.styling.borderWidth > 0)widget.style.border`$this.config.styling.borderWidthpx solid $this.config.styling.borderColor`if (this.config.styling.shadow)widget.style.boxShadowthis.config.styling.shadowif (this.config.position)container.style.zIndexthis.config.position.zIndexconst cornerthis.config.position.cornerconst offsetthis.config.position.offsetif (corner.includes("top"))container.style.topoffset.y + "px"container.style.bottom"auto"elsecontainer.style.bottomoffset.y + "px"container.style.top"auto"if (corner.includes("right"))container.style.rightoffset.x + "px"container.style.left"auto"elsecontainer.style.leftoffset.x + "px"container.style.right"auto"bindEventsfunction ()const selfthisthis.elements.button.addEventListener("click"function ()self.toggleWidget())const minimizeBtnthis.elements.container.querySelector(".chat-minimize-btn")if (minimizeBtn)minimizeBtn.addEventListener("click"function ()self.minimizeWidget())const closeBtnthis.elements.container.querySelector(".chat-close-btn")closeBtn.addEventListener("click"function ()self.closeWidget())if (this.elements.startForm)this.elements.startForm.addEventListener("submit"function (e)e.preventDefault()self.handleStartChat(e))if (this.elements.form)this.elements.form.addEventListener("submit"function (e)e.preventDefault()self.handleSendMessage(e))this.elements.input.addEventListener("input"function ()self.handleInputChange())this.elements.input.addEventListener("keydown"function (e)if (e.key"Enter" && !e.shiftKey)e.preventDefault()self.handleSendMessage(e))const endBtnthis.elements.container.querySelector(".chat-end-btn")if (endBtn)endBtn.addEventListener("click"function ()self.endChat())document.addEventListener("click"function (e)if (!self.elements.container.contains(e.target) && self.state.isOpen))document.addEventListener("visibilitychange"function ()if ( !document.hidden && self.socket && self.state.session.chatSessionId )self.validateSession())window.addEventListener("beforeunload"function (e)if (self.state.isChatStarted && self.state.session.chatSessionId)e.preventDefault()e.returnValue"You have an active chat session. Are you sure you want to leave?"return e.returnValue)initSocketfunction ()const selfthistrythis.socketio(this.config.serverUrltransports["websocket""polling"]withCredentialstrue)this.socket.on("connect"function ()self.log("Connected to chat server with ID"self.socket.id)self.state.isConnectedtrueself.updateConnectionStatus("connected")if (self.state.session.chatSessionId)self.socket.emit("customer-resume-session"customerIdself.state.session.customerIdchatSessionIdself.state.session.chatSessionIdcustomerNameself.state.customerInfo.name))this.socket.on("disconnect"function ()self.log("Disconnected from chat server")self.state.isConnectedfalseself.updateConnectionStatus("disconnected"))this.socket.on("connect_error"function (error)self.log("Connection error"error)self.state.isConnectedfalseself.updateConnectionStatus("error"))this.socket.on("chat-started"function (data)self.handleChatStarted(data))this.socket.on("session-resumed"function (data)self.handleSessionResumed(data))this.socket.on("session-resume-error"function (error)self.handleSessionResumeError(error))this.socket.on("chat-history"function (data)self.handleChatHistory(data))this.socket.on("receive-message"function (message)self.handleReceiveMessage(message))this.socket.on("agent-assigned"function (data)self.handleAgentAssigned(data))this.socket.on("agent-typing"function (data)self.handleAgentTyping(data))this.socket.on("chat-ended"function (data)self.handleChatEnded(data))this.socket.on("error"function (error)self.handleError(error))this.socket.on("message-error"function (error)self.handleMessageError(error))this.socket.on("end-chat-error"function (error)self.handleEndChatError(error))this.socket.on("mark-message-as-read-response"function (response)self.log("Message receipt"response))catch (error)console.error( "ChatWidgetFailed to initialize socket connection"error )this.updateConnectionStatus("error")updateConnectionStatusfunction (status)const connectingElthis.elements.container.querySelector(".chat-connecting")const startElthis.elements.container.querySelector(".chat-start")const statusElthis.elements.container.querySelector(".chat-status")switch (status)case "connecting"connectingEl.style.display"block"startEl.style.display"none"statusEl.textContent"Connecting..."breakcase "connected"connectingEl.style.display"none"startEl.style.display"block"statusEl.textContent"Connected"breakcase "disconnected"statusEl.textContent"Disconnected"breakcase "error"connectingEl.style.display"none"startEl.style.display"block"statusEl.textContent"Connection Error"breakhandleChatStartedfunction (data)this.log("Chat started"data)this.state.isChatStartedtruethis.state.sessioncustomerIddata.customerIdchatSessionIddata.chatSessionIdthis.storeSession(data)this.elements.container.querySelector(".chat-start").style.display"none"this.elements.container.querySelector( ".chat-conversation" ).style.display"flex"this.elements.container.querySelector( ".chat-input-container" ).style.display"block"this.elements.container.querySelector(".chat-status").textContent"Online"this.addMessage(id"welcome"messagedata.messagesender_type1timestampnew Date())this.elements.input.focus()handleReceiveMessagefunction (message)this.log("Message received"message)this.state.agentTypingfalsethis.updateTypingIndicator()this.addMessage(idmessage.idmessagemessage.messagesender_typemessage.sender_typetimestampnew Date(message.timestamp || Date.now()))if (message.id && this.state.session.chatSessionId)this.socket.emit("mark-message-as-read"messageIdmessage.idsessionIdthis.state.session.chatSessionId)if (!this.state.isOpen)this.showNotification()handleAgentAssignedfunction (data)this.log("Agent assigned"data)this.state.agentInfonamedata.agentNameiddata.agentIdthis.elements.container.querySelector( ".chat-title" ).textContent`$this.config.companyName- $data.agentName`this.elements.container.querySelector( ".chat-status" ).textContent`Chatting with $data.agentName`this.addMessage(id"system-agent-assigned"message`$data.agentNamehas joined the chat.`sender_type0timestampnew Date())handleAgentTypingfunction (data)this.state.agentTypingdata.isTypingthis.updateTypingIndicator()handleChatEndedfunction (data)this.log("Chat ended"data)this.addMessage(id"system-chat-ended"messagedata.message || "Chat has ended."sender_type0timestampnew Date())this.elements.container.querySelector( ".chat-input-container" ).style.display"none"this.elements.container.querySelector(".chat-status").textContent"Chat Ended"this.clearStoredSession()setTimeout(()>this.resetChatState()5000)handleSessionResumedfunction (data)this.log("Session resumed successfully"data)this.state.isChatStartedtruethis.state.sessioncustomerIddata.customerIdchatSessionIddata.chatSessionIdthis.storeSession(data)this.elements.container.querySelector(".chat-start").style.display"none"this.elements.container.querySelector( ".chat-conversation" ).style.display"flex"this.elements.container.querySelector( ".chat-input-container" ).style.display"block"this.elements.container.querySelector(".chat-status").textContent"Session Resumed"this.socket.emit("get-chat-history"chatSessionIddata.chatSessionId)if (this.elements.input)this.elements.input.focus()this.addMessage(id"system-session-resumed"message"Session resumed successfully."sender_type0timestampnew Date())handleSessionResumeErrorfunction (error)this.log("Session resume failed"error)this.clearStoredSession()this.addMessage(id"system-session-expired"message"Previous session expired. Please start a new chat."sender_type0timestampnew Date())this.updateConnectionStatus("connected")handleChatHistoryfunction (data)this.log( "Received chat history"data.messages?.length || 0"messages" )this.state.messages[]this.elements.messages.innerHTML""if (data.messages && data.messages.length > 0)data.messages.forEach((msg)>this.addMessage(idmsg.idmessagemsg.messagesender_typemsg.sender_typetimestampnew Date(msg.timestamp || msg.createdAt)))this.autoScrollToBottom()handleErrorfunction (error)this.log("Socket error"error)this.showErrorMessage("An error occurred with the chat connection")handleMessageErrorfunction (error)this.log("Message error"error)this.showErrorMessage("Failed to send message. Please try again.")this.markMessageAsFailed(error.originalMessage)handleEndChatErrorfunction (error)this.log("End chat error"error)this.showErrorMessage("Failed to end chat. Please try again.")handleStartChatfunction (e)const formDatanew FormData(e.target)this.state.customerInfonameformData.get("name").trim()phoneformData.get("phone").trim()emailformData.get("email").trim()if (!this.state.customerInfo.name || !this.state.customerInfo.phone)this.showErrorMessage("Name and phone are required")returnif (!this.state.isConnected)this.showErrorMessage("Not connected to chat service")returnthis.socket.emit("customer-join"this.state.customerInfo)handleSendMessagefunction (e)const messagethis.elements.input.value.trim()if (!message || !this.state.session.chatSessionId)returnconst messageDatamessagemessagechatIdthis.state.session.chatSessionIdsender_type2source"web"chatSessionIdthis.state.session.chatSessionIdthis.socket.emit("send-message"messageData)this.addMessage(id"pending-" + Date.now()messagemessagesender_type2senderIdthis.state.session.customerIdtimestampnew Date()isPendingtrue)this.elements.input.value""this.updateSendButton()this.stopTyping()handleInputChangefunction ()const messagethis.elements.input.value.trim()this.updateSendButton()if (!this.state.session.chatSessionId) returnif (!this.state.isTyping && message)this.state.isTypingtruethis.socket.emit("typing"chatIdthis.state.session.chatSessionIdisTypingtruesender_type2)clearTimeout(this.typingTimeout)this.typingTimeoutsetTimeout(()>this.stopTyping()1000)stopTypingfunction ()if (this.state.isTyping)this.state.isTypingfalseif (this.state.session.chatSessionId)this.socket.emit("typing"chatIdthis.state.session.chatSessionIdisTypingfalsesender_type2)clearTimeout(this.typingTimeout)endChatfunction ()if (!this.state.session.chatSessionId) returnthis.socket.emit("customer-end-chat"chatSessionIdthis.state.session.chatSessionId)addMessagefunction (messageData)this.state.messages.push(messageData)const shouldAutoScrollthis.isNearBottom()const messageEldocument.createElement("div")messageEl.className`chat-message $messageData.sender_type0 ? "system"messageData.sender_type1 ? "agent""customer"$messageData.isPending ? "pending"""`messageEl.dataset.messageIdmessageData.idif (messageData.sender_type0)messageEl.innerHTML` <div class"message-content system-message">$this.escapeHtml( messageData.message )</div> `elsemessageEl.innerHTML` <div class"message-content">$this.escapeHtml( messageData.message )</div> <div class"message-time">$this.formatTime( messageData.timestamp )</div> $messageData.isPending ? '<div class"message-status">Sending...</div>'""`this.elements.messages.appendChild(messageEl)if (shouldAutoScroll || messageData.sender_type2)this.autoScrollToBottom()markMessageAsFailedfunction (originalMessage)const pendingMessagesthis.elements.messages.querySelectorAll( ".chat-message.pending" )pendingMessages.forEach((msgEl)>const contentmsgEl.querySelector(".message-content").textContentif (contentoriginalMessage)msgEl.classList.remove("pending")msgEl.classList.add("failed")const statusElmsgEl.querySelector(".message-status")if (statusEl)statusEl.textContent"Failed to send"statusEl.style.color"#f44336")updateTypingIndicatorfunction ()const typingElthis.elements.container.querySelector( ".chat-typing-indicator" )if (this.state.agentTyping)typingEl.style.display"flex"this.autoScrollToBottom()elsetypingEl.style.display"none"updateSendButtonfunction ()const sendBtnthis.elements.container.querySelector(".chat-send-btn")const hasTextthis.elements.input.value.trim().length > 0sendBtn.disabled!hasText || !this.state.isChatStartedtoggleWidgetfunction ()if (this.state.isOpen)this.closeWidget()elsethis.openWidget()openWidgetfunction ()this.state.isOpentruethis.elements.widget.style.display"block"this.elements.button.querySelector(".chat-icon").style.display"none"this.elements.button.querySelector(".close-icon").style.display"block"this.elements.container.classList.add("open")if (this.state.isChatStarted && this.elements.input)setTimeout(()> this.elements.input.focus()100)this.clearNotification()closeWidgetfunction ()this.state.isOpenfalsethis.elements.widget.style.display"none"this.elements.button.querySelector(".chat-icon").style.display"block"this.elements.button.querySelector(".close-icon").style.display"none"this.elements.container.classList.remove("open")minimizeWidgetfunction ()this.closeWidget()resetChatStatefunction ()this.state.isChatStartedfalsethis.state.messages[]this.state.sessioncustomerIdnullchatSessionIdnullthis.state.agentInfonullthis.state.agentTypingfalsethis.clearStoredSession()this.elements.container.querySelector( ".chat-conversation" ).style.display"none"this.elements.container.querySelector( ".chat-input-container" ).style.display"none"this.elements.container.querySelector(".chat-start").style.display"block"this.elements.container.querySelector(".chat-title").textContentthis.config.companyNamethis.elements.container.querySelector(".chat-status").textContentthis .state.isConnected ? "Connected""Disconnected"this.elements.messages.innerHTML""if (this.elements.startForm)this.elements.startForm.reset()showNotificationfunction ()this.elements.button.classList.add("has-notification")clearNotificationfunction ()this.elements.button.classList.remove("has-notification")showErrorMessagefunction (message)const errorEldocument.createElement("div")errorEl.className"chat-error-message"errorEl.textContentmessageconst chatBodythis.elements.container.querySelector(".chat-body")chatBody.appendChild(errorEl)setTimeout(()>if (errorEl.parentNode)errorEl.parentNode.removeChild(errorEl)5000)scrollToBottomfunction (forcefalse)const messagesContainerthis.elements.container?.querySelector( ".chat-messages-container" )const messagesElementthis.elements.messagesconst scrollableElementmessagesContainer || messagesElementif (scrollableElement)const scrollOptionstopscrollableElement.scrollHeightbehaviorforce ? "auto""smooth"if (scrollableElement.scrollTo)scrollableElement.scrollTo(scrollOptions)elsescrollableElement.scrollTopscrollableElement.scrollHeightif (messagesElement && messagesElement !scrollableElement)if (messagesElement.scrollTo)messagesElement.scrollTo(topmessagesElement.scrollHeightbehaviorforce ? "auto""smooth")elsemessagesElement.scrollTopmessagesElement.scrollHeightautoScrollToBottomfunction ()setTimeout(()>this.scrollToBottom()50)isNearBottomfunction ()const messagesContainerthis.elements.container?.querySelector( ".chat-messages-container" )const scrollableElementmessagesContainer || this.elements.messagesif (!scrollableElement) return trueconst threshold100const scrollTopscrollableElement.scrollTopconst scrollHeightscrollableElement.scrollHeightconst clientHeightscrollableElement.clientHeightreturn scrollTop + clientHeight >scrollHeight - thresholdformatTimefunction (date)return new Date(date).toLocaleTimeString([]hour"2-digit"minute"2-digit")escapeHtmlfunction (text)const divdocument.createElement("div")div.textContenttextreturn div.innerHTMLlogfunction ()if (this.config.debug)console.log("[ChatWidget]"...arguments)checkExistingSessionfunction ()const storedSessionthis.getStoredSession()if (storedSession)this.log("Found stored session"storedSession.chatSessionId)this.resumeSession(storedSession)elsethis.log("No stored session foundinitializing fresh")this.initSocket()resumeSessionfunction (sessionData)this.log("Attempting to resume session"sessionData.chatSessionId)this.updateConnectionStatus("connecting")this.initSocket()this.state.sessioncustomerIdsessionData.customerIdchatSessionIdsessionData.chatSessionIdthis.state.customerInfonamesessionData.customerNamephonesessionData.customerPhoneemailsessionData.customerEmailstoreSessionfunction (sessionData)const dataToStorecustomerIdsessionData.customerIdchatSessionIdsessionData.chatSessionIdcustomerNamesessionData.customerName || this.state.customerInfo.namecustomerPhonesessionData.customerPhone || this.state.customerInfo.phonecustomerEmailsessionData.customerEmail || this.state.customerInfo.emailtimestampDate.now()status"active"trylocalStorage.setItem( "chat_widget_session"JSON.stringify(dataToStore) )this.log("Session stored"dataToStore.chatSessionId)catch (error)this.log("Failed to store session"error)getStoredSessionfunction ()tryconst storedlocalStorage.getItem("chat_widget_session")if (stored)const sessionJSON.parse(stored)const isValidDate.now() - session.timestamp < 24 * 60 * 60 * 1000if (isValid)return sessionelsethis.clearStoredSession()catch (error)this.log("Error reading stored session"error)this.clearStoredSession()return nullclearStoredSessionfunction ()trylocalStorage.removeItem("chat_widget_session")this.log("Session cleared from storage")catch (error)this.log("Error clearing session"error)validateSessionfunction ()if (this.state.session.chatSessionId && this.socket)this.socket.emit("validate-session"customerIdthis.state.session.customerIdchatSessionIdthis.state.session.chatSessionId)openfunction ()this.openWidget()closefunction ()this.closeWidget()destroyfunction ()if (this.socket)this.socket.disconnect()if (this.elements.container)this.elements.container.parentNode.removeChild(this.elements.container)this.clearStoredSession()clearTimeout(this.typingTimeout)this.state.isInitializedfalsegetStatefunction ()returnisConnectedthis.state.isConnectedisChatStartedthis.state.isChatStartedisOpenthis.state.isOpenmessagesCountthis.state.messages.lengthsessionthis.state.sessionagentInfothis.state.agentInfoclearSessionfunction ()this.clearStoredSession()this.resetChatState()updateConfigfunction (newOptions)this.configObject.assign(this.confignewOptions)if (this.elements.container)this.applyCustomStyling()this.log("Configuration updated"newOptions)updateColorsfunction (colors)const defaultColorsprimary"#667eea"secondary"#764ba2"accent"#ff6b6b"success"#51cf66"warning"#ffd43b"error"#ff4444"background"#ffffff"surface"#f8f9fa"text"#333333"textSecondary"#666666"border"#e9ecef"shadow"rgba(0000.12)"this.config.colorsObject.assign(defaultColorsthis.config.colorscolors)if (this.elements.container)this.applyCustomStyling()updateButtonfunction (buttonConfig)this.config.buttonObject.assign(this.config.buttonbuttonConfig)if (this.elements.container)this.applyCustomStyling()updatePositionfunction (position)this.config.positionObject.assign(this.config.positionposition)if (this.elements.container)this.applyCustomStyling()updateTextfunction (textConfig)this.config.textObject.assign(this.config.texttextConfig)if (this.elements.container)this.updateTextContent()updateTextContentfunction ()if (!this.elements.container) returnconst titlethis.elements.container.querySelector(".chat-title")if (title) title.textContentthis.config.text.companyNameif (this.elements.button)this.elements.button.titlethis.config.text.buttonTextconst welcomeMsgthis.elements.container.querySelector( ".chat-welcome pfirst-child" )if (welcomeMsg) welcomeMsg.textContentthis.config.text.welcomeMessageconst startChatTextthis.elements.container.querySelector( ".chat-welcome plast-child" )if (startChatText) startChatText.textContentthis.config.text.startChatTextconst nameLabelthis.elements.container.querySelector( 'label[for"customer-name"]' )if (nameLabel) nameLabel.textContentthis.config.text.nameLabelconst phoneLabelthis.elements.container.querySelector( 'label[for"customer-phone"]' )if (phoneLabel) phoneLabel.textContentthis.config.text.phoneLabelconst emailLabelthis.elements.container.querySelector( 'label[for"customer-email"]' )if (emailLabel) emailLabel.textContentthis.config.text.emailLabelconst startBtnthis.elements.container.querySelector(".chat-start-btn")if (startBtn) startBtn.textContentthis.config.text.startChatButtonconst placeholderthis.elements.container.querySelector(".chat-input")if (placeholder) placeholder.placeholderthis.config.text.placeholderTextwindow.ChatWidgetChatWidget)(windowdocument)