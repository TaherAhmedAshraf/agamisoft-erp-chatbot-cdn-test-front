/**
 * Customer Chat Widget SDK - Minified
 * A simple, embeddable chat widget for customer support
 */
!function (e, t) { "use strict"; if ("undefined" == typeof io) return void console.error("ChatWidget: Socket.IO library is required. Please include it before this script."); const n = { config: { serverUrl: "", position: "bottom-right", theme: "default", welcomeMessage: "Hello! How can we help you today?", buttonText: "Chat with us", companyName: "Support", showMinimizeButton: !0, autoOpen: !1, debug: !1 }, state: { isInitialized: !1, isConnected: !1, isChatStarted: !1, isOpen: !1, isTyping: !1, agentTyping: !1, messages: [], session: { customerId: null, chatSessionId: null }, agentInfo: null, customerInfo: { name: "", phone: "", email: "" } }, socket: null, elements: { container: null, widget: null, button: null, header: null, messages: null, input: null, form: null, startForm: null }, typingTimeout: null, init: function (e) { if (this.state.isInitialized) return void console.warn("ChatWidget: Already initialized"); if (this.config = Object.assign({}, this.config, e || {}), !this.config.serverUrl) return void console.error("ChatWidget: serverUrl is required"); this.log("Initializing ChatWidget..."), this.createWidget(), this.initSocket(), this.state.isInitialized = !0, this.log("ChatWidget initialized successfully") }, createWidget: function () { this.elements.container = t.createElement("div"), this.elements.container.className = "chat-widget-container " + this.config.position + " " + this.config.theme, this.elements.container.innerHTML = this.getWidgetHTML(), t.body.appendChild(this.elements.container), this.elements.widget = this.elements.container.querySelector(".chat-widget"), this.elements.button = this.elements.container.querySelector(".chat-toggle-button"), this.elements.header = this.elements.container.querySelector(".chat-header"), this.elements.messages = this.elements.container.querySelector(".chat-messages"), this.elements.input = this.elements.container.querySelector(".chat-input"), this.elements.form = this.elements.container.querySelector(".chat-input-form"), this.elements.startForm = this.elements.container.querySelector(".chat-start-form"), this.bindEvents(), this.config.autoOpen && this.openWidget() }, getWidgetHTML: function () { return `\n                <button class="chat-toggle-button" title="${this.config.buttonText}">\n                    <svg class="chat-icon" viewBox="0 0 24 24" width="24" height="24">\n                        <path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h4l4 4 4-4h4c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z"/>\n                    </svg>\n                    <svg class="close-icon" viewBox="0 0 24 24" width="24" height="24" style="display: none;">\n                        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>\n                    </svg>\n                </button>\n\n                <div class="chat-widget" style="display: none;">\n                    <div class="chat-header">\n                        <div class="chat-header-info">\n                            <h3 class="chat-title">${this.config.companyName}</h3>\n                            <span class="chat-status">Connect to start chatting</span>\n                        </div>\n                        <div class="chat-header-actions">\n                            ${this.config.showMinimizeButton ? '<button class="chat-minimize-btn" title="Minimize">−</button>' : ""}\n                            <button class="chat-close-btn" title="Close">×</button>\n                        </div>\n                    </div>\n\n                    <div class="chat-body">\n                        <div class="chat-connecting" style="display: block;">\n                            <div class="connecting-spinner"></div>\n                            <p>Connecting to chat service...</p>\n                        </div>\n\n                        <div class="chat-start" style="display: none;">\n                            <div class="chat-welcome">\n                                <p>${this.config.welcomeMessage}</p>\n                                <p>Please provide your details to start chatting:</p>\n                            </div>\n                            <form class="chat-start-form">\n                                <div class="form-group">\n                                    <label for="customer-name">Name *</label>\n                                    <input type="text" id="customer-name" name="name" required>\n                                </div>\n                                <div class="form-group">\n                                    <label for="customer-phone">Phone *</label>\n                                    <input type="tel" id="customer-phone" name="phone" required>\n                                </div>\n                                <div class="form-group">\n                                    <label for="customer-email">Email</label>\n                                    <input type="email" id="customer-email" name="email">\n                                </div>\n                                <button type="submit" class="chat-start-btn">Start Chat</button>\n                            </form>\n                        </div>\n\n                        <div class="chat-conversation" style="display: none;">\n                            <div class="chat-messages"></div>\n                            <div class="chat-typing-indicator" style="display: none;">\n                                <div class="typing-dots">\n                                    <span></span>\n                                    <span></span>\n                                    <span></span>\n                                </div>\n                                <span class="typing-text">Agent is typing...</span>\n                            </div>\n                        </div>\n\n                        <div class="chat-input-container" style="display: none;">\n                            <form class="chat-input-form">\n                                <input type="text" class="chat-input" placeholder="Type your message..." maxlength="1000">\n                                <button type="submit" class="chat-send-btn" disabled>\n                                    <svg viewBox="0 0 24 24" width="20" height="20">\n                                        <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>\n                                    </svg>\n                                </button>\n                            </form>\n                            <div class="chat-actions">\n                                <button class="chat-end-btn">End Chat</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            ` }, bindEvents: function () { const e = this; this.elements.button.addEventListener("click", (function () { e.toggleWidget() })); const t = this.elements.container.querySelector(".chat-minimize-btn"); t && t.addEventListener("click", (function () { e.minimizeWidget() })); const n = this.elements.container.querySelector(".chat-close-btn"); n.addEventListener("click", (function () { e.closeWidget() })), this.elements.startForm && this.elements.startForm.addEventListener("submit", (function (t) { t.preventDefault(), e.handleStartChat(t) })), this.elements.form && (this.elements.form.addEventListener("submit", (function (t) { t.preventDefault(), e.handleSendMessage(t) })), this.elements.input.addEventListener("input", (function () { e.handleInputChange() })), this.elements.input.addEventListener("keydown", (function (t) { "Enter" === t.key && !t.shiftKey && (t.preventDefault(), e.handleSendMessage(t)) }))); const s = this.elements.container.querySelector(".chat-end-btn"); s && s.addEventListener("click", (function () { e.endChat() })), t.addEventListener("click", (function (t) { e.elements.container.contains(t.target) || !e.state.isOpen })) }, initSocket: function () { const e = this; try { this.socket = io(this.config.serverUrl, { transports: ["websocket", "polling"], withCredentials: !0 }), this.socket.on("connect", (function () { e.log("Connected to chat server with ID:", e.socket.id), e.state.isConnected = !0, e.updateConnectionStatus("connected") })), this.socket.on("disconnect", (function () { e.log("Disconnected from chat server"), e.state.isConnected = !1, e.updateConnectionStatus("disconnected") })), this.socket.on("connect_error", (function (t) { e.log("Connection error:", t), e.state.isConnected = !1, e.updateConnectionStatus("error") })), this.socket.on("chat-started", (function (t) { e.handleChatStarted(t) })), this.socket.on("receive-message", (function (t) { e.handleReceiveMessage(t) })), this.socket.on("agent-assigned", (function (t) { e.handleAgentAssigned(t) })), this.socket.on("agent-typing", (function (t) { e.handleAgentTyping(t) })), this.socket.on("chat-ended", (function (t) { e.handleChatEnded(t) })), this.socket.on("error", (function (t) { e.handleError(t) })), this.socket.on("message-error", (function (t) { e.handleMessageError(t) })), this.socket.on("end-chat-error", (function (t) { e.handleEndChatError(t) })), this.socket.on("mark-message-as-read-response", (function (t) { e.log("Message receipt:", t) })) } catch (t) { console.error("ChatWidget: Failed to initialize socket connection:", t), this.updateConnectionStatus("error") } }, updateConnectionStatus: function (e) { const t = this.elements.container.querySelector(".chat-connecting"), n = this.elements.container.querySelector(".chat-start"), s = this.elements.container.querySelector(".chat-status"); switch (e) { case "connected": t.style.display = "none", n.style.display = "block", s.textContent = "Connected"; break; case "disconnected": s.textContent = "Disconnected"; break; case "error": t.style.display = "none", n.style.display = "block", s.textContent = "Connection Error" } }, handleChatStarted: function (e) { this.log("Chat started:", e), this.state.isChatStarted = !0, this.state.session = { customerId: e.customerId, chatSessionId: e.chatSessionId }, this.elements.container.querySelector(".chat-start").style.display = "none", this.elements.container.querySelector(".chat-conversation").style.display = "block", this.elements.container.querySelector(".chat-input-container").style.display = "block", this.elements.container.querySelector(".chat-status").textContent = "Online", this.addMessage({ id: "welcome", message: e.message, senderType: "agent", timestamp: new Date }), this.elements.input.focus() }, handleReceiveMessage: function (e) { this.log("Message received:", e), this.state.agentTyping = !1, this.updateTypingIndicator(), this.addMessage({ id: e.id, message: e.message, senderType: e.senderType, timestamp: new Date(e.timestamp || Date.now()) }), e.id && this.state.session.chatSessionId && this.socket.emit("mark-message-as-read", { messageId: e.id, sessionId: this.state.session.chatSessionId }), this.state.isOpen || this.showNotification() }, handleAgentAssigned: function (e) { this.log("Agent assigned:", e), this.state.agentInfo = { name: e.agentName, id: e.agentId }, this.elements.container.querySelector(".chat-title").textContent = `${this.config.companyName} - ${e.agentName}`, this.elements.container.querySelector(".chat-status").textContent = `Chatting with ${e.agentName}`, this.addMessage({ id: "system-agent-assigned", message: `${e.agentName} has joined the chat.`, senderType: "system", timestamp: new Date }) }, handleAgentTyping: function (e) { this.state.agentTyping = e.isTyping, this.updateTypingIndicator() }, handleChatEnded: function (e) { this.log("Chat ended:", e), this.addMessage({ id: "system-chat-ended", message: e.message || "Chat has ended.", senderType: "system", timestamp: new Date }), this.elements.container.querySelector(".chat-input-container").style.display = "none", this.elements.container.querySelector(".chat-status").textContent = "Chat Ended", setTimeout(() => { this.resetChatState() }, 5e3) }, handleError: function (e) { this.log("Socket error:", e), this.showErrorMessage("An error occurred with the chat connection") }, handleMessageError: function (e) { this.log("Message error:", e), this.showErrorMessage("Failed to send message. Please try again."), this.markMessageAsFailed(e.originalMessage) }, handleEndChatError: function (e) { this.log("End chat error:", e), this.showErrorMessage("Failed to end chat. Please try again.") }, handleStartChat: function (e) { const t = new FormData(e.target); if (this.state.customerInfo = { name: t.get("name").trim(), phone: t.get("phone").trim(), email: t.get("email").trim() }, !this.state.customerInfo.name || !this.state.customerInfo.phone) return void this.showErrorMessage("Name and phone are required"); if (!this.state.isConnected) return void this.showErrorMessage("Not connected to chat service"); this.socket.emit("customer-join", this.state.customerInfo) }, handleSendMessage: function (e) { const t = this.elements.input.value.trim(); if (!t || !this.state.session.chatSessionId) return; const n = { message: t, chatId: this.state.session.chatSessionId, senderType: "customer", source: "web", chatSessionId: this.state.session.chatSessionId }; this.socket.emit("send-message", n), this.addMessage({ id: "pending-" + Date.now(), message: t, senderType: "customer", senderId: this.state.session.customerId, timestamp: new Date, isPending: !0 }), this.elements.input.value = "", this.updateSendButton(), this.stopTyping() }, handleInputChange: function () { const e = this.elements.input.value.trim(); this.updateSendButton(), this.state.session.chatSessionId && (!this.state.isTyping && e && (this.state.isTyping = !0, this.socket.emit("typing", { chatId: this.state.session.chatSessionId, isTyping: !0, senderType: "customer" })), clearTimeout(this.typingTimeout), this.typingTimeout = setTimeout(() => { this.stopTyping() }, 1e3)) }, stopTyping: function () { this.state.isTyping && (this.state.isTyping = !1, this.state.session.chatSessionId && this.socket.emit("typing", { chatId: this.state.session.chatSessionId, isTyping: !1, senderType: "customer" })), clearTimeout(this.typingTimeout) }, endChat: function () { this.state.session.chatSessionId && this.socket.emit("customer-end-chat", { chatSessionId: this.state.session.chatSessionId }) }, addMessage: function (e) { this.state.messages.push(e); const t = document.createElement("div"); t.className = `chat-message ${e.senderType} ${e.isPending ? "pending" : ""}`, t.dataset.messageId = e.id, "system" === e.senderType ? t.innerHTML = `\n                    <div class="message-content system-message">${this.escapeHtml(e.message)}</div>\n                ` : t.innerHTML = `\n                    <div class="message-content">${this.escapeHtml(e.message)}</div>\n                    <div class="message-time">${this.formatTime(e.timestamp)}</div>\n                    ${e.isPending ? '<div class="message-status">Sending...</div>' : ""}\n                `, this.elements.messages.appendChild(t), this.scrollToBottom() }, markMessageAsFailed: function (e) { this.elements.messages.querySelectorAll(".chat-message.pending").forEach(t => { const n = t.querySelector(".message-content").textContent; if (n === e) { t.classList.remove("pending"), t.classList.add("failed"); const e = t.querySelector(".message-status"); e && (e.textContent = "Failed to send", e.style.color = "#f44336") } }) }, updateTypingIndicator: function () { const e = this.elements.container.querySelector(".chat-typing-indicator"); this.state.agentTyping ? (e.style.display = "flex", this.scrollToBottom()) : e.style.display = "none" }, updateSendButton: function () { const e = this.elements.container.querySelector(".chat-send-btn"), t = this.elements.input.value.trim().length > 0; e.disabled = !t || !this.state.isChatStarted }, toggleWidget: function () { this.state.isOpen ? this.closeWidget() : this.openWidget() }, openWidget: function () { this.state.isOpen = !0, this.elements.widget.style.display = "block", this.elements.button.querySelector(".chat-icon").style.display = "none", this.elements.button.querySelector(".close-icon").style.display = "block", this.elements.container.classList.add("open"), this.state.isChatStarted && this.elements.input && setTimeout(() => this.elements.input.focus(), 100), this.clearNotification() }, closeWidget: function () { this.state.isOpen = !1, this.elements.widget.style.display = "none", this.elements.button.querySelector(".chat-icon").style.display = "block", this.elements.button.querySelector(".close-icon").style.display = "none", this.elements.container.classList.remove("open") }, minimizeWidget: function () { this.closeWidget() }, resetChatState: function () { this.state.isChatStarted = !1, this.state.messages = [], this.state.session = { customerId: null, chatSessionId: null }, this.state.agentInfo = null, this.state.agentTyping = !1, this.elements.container.querySelector(".chat-conversation").style.display = "none", this.elements.container.querySelector(".chat-input-container").style.display = "none", this.elements.container.querySelector(".chat-start").style.display = "block", this.elements.container.querySelector(".chat-title").textContent = this.config.companyName, this.elements.container.querySelector(".chat-status").textContent = this.state.isConnected ? "Connected" : "Disconnected", this.elements.messages.innerHTML = "", this.elements.startForm && this.elements.startForm.reset() }, showNotification: function () { this.elements.button.classList.add("has-notification") }, clearNotification: function () { this.elements.button.classList.remove("has-notification") }, showErrorMessage: function (e) { const t = document.createElement("div"); t.className = "chat-error-message", t.textContent = e; const n = this.elements.container.querySelector(".chat-body"); n.appendChild(t), setTimeout(() => { t.parentNode && t.parentNode.removeChild(t) }, 5e3) }, scrollToBottom: function () { this.elements.messages && (this.elements.messages.scrollTop = this.elements.messages.scrollHeight) }, formatTime: function (e) { return new Date(e).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }) }, escapeHtml: function (e) { const t = document.createElement("div"); return t.textContent = e, t.innerHTML }, log: function () { this.config.debug && console.log("[ChatWidget]", ...arguments) }, open: function () { this.openWidget() }, close: function () { this.closeWidget() }, destroy: function () { this.socket && this.socket.disconnect(), this.elements.container && this.elements.container.parentNode.removeChild(this.elements.container), clearTimeout(this.typingTimeout), this.state.isInitialized = !1 }, getState: function () { return { isConnected: this.state.isConnected, isChatStarted: this.state.isChatStarted, isOpen: this.state.isOpen, messagesCount: this.state.messages.length, session: this.state.session, agentInfo: this.state.agentInfo } } }; e.ChatWidget = n }(window, document);
